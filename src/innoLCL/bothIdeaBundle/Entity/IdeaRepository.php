<?php

namespace innoLCL\bothIdeaBundle\Entity;

/**
 * IdeaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IdeaRepository extends \Doctrine\ORM\EntityRepository
{
    /**
    * Donne le nombre d'idée ayant ce statut, et son etats de validation
    *
    * @param string $statut, bool $confirmated
    * @return int
    */
    public function getIdeaCountByStatut($statut,$validated = 0,$not = false) 
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->select('COUNT(a)')
            ->where('a.validated = :validated')
                            ->setParameter('validated', $validated);
        if($not === true) 
        {
            $qb->andwhere('a.statuts != :statut')
                  ->setParameter('statut', $statut);
        }
        else
        {
            $qb->andwhere('a.statuts = :statut')
                  ->setParameter('statut', $statut);
        }
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    /**
    * Donne le nombre d'idée selectionnée
    *
    * @param none
    * @return int
    */
    public function getSelectedIdeaCount() 
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->select('COUNT(a)')
            ->where('a.selected = :selected')
            ->setParameter('selected', 1);
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    /**
    * Donne le nombre d'idée selectionnée
    *
    * @param none
    * @return int
    */
    public function getSelectedIdeaBlockedCount() 
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->select('COUNT(a)')
            ->where('a.selected = :selected')
            ->setParameter('selected', 2);
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    
    /**
    * Dit si la derniere idée est validé
    *
    * @param int $idUser
    * @return bool
    */
    public function isUserLastIdeaValidated($idUser) 
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->select('a')
            ->where('a.author = :author')
            ->setParameter('author', $idUser)
            ->orderBy('a.postedon', 'DESC')
            ->orderBy('a.id', 'DESC')
            ->setMaxResults(1);
        $lastIdea = $qb->getQuery()->getOneOrNullResult();
        if($lastIdea != null && $lastIdea->getValidated() == 1) 
        {
            return true;
        }
        else 
        {
            return false;
        }
    }
    
    /**
    * Dit si la derniere idée est refused
    *
    * @param int $idUser
    * @return bool
    */
    public function isUserLastIdeaRefused($idUser) 
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->select('a')
            ->where('a.author = :author')
            ->setParameter('author', $idUser)
            ->orderBy('a.postedon', 'DESC')
            ->orderBy('a.id', 'DESC')
            ->setMaxResults(1);
        $lastIdea = $qb->getQuery()->getOneOrNullResult();
        if($lastIdea != null && $lastIdea->getStatuts() == "refused") 
        {
            return true;
        }
        else 
        {
            return false;
        }
    }
    
    /**
    * retourne l'idée de la dernière idée d'un utilisateur
    *
    * @param int $idUser
    * @return bool
    */
    public function getLastIdeaIdOfUser($idUser) 
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->select('a')
            ->where('a.author = :author')
            ->setParameter('author', $idUser)
            ->orderBy('a.postedon', 'DESC')
            ->orderBy('a.id', 'DESC')
            ->setMaxResults(1);
        $lastIdea = $qb->getQuery()->getOneOrNullResult();
        if($lastIdea != null) 
        {
            return $lastIdea->getId();
        }
        else 
        {
            return 0;
        }
    }
    
    /**
    * retourne le nombre d'idée d'un user
    *
    * @param int $idUser
    * @return int
    */
    public function getCountIdeaOfUser($idUser) 
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->select('COUNT(a)')
            ->where('a.author = :author')
            ->setParameter('author', $idUser)
            ->setMaxResults(1);
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    /**
    * 
    *
    * @param int $idUser
    * @return int
    */
    public function getListIdeaByStatut($statut,$validated = 0,$not = false,$page = 1) 
    {
		$limit = 15;
		
		$first = ($page - 1) * $limit;
        $qb = $this->createQueryBuilder('a')
                            ->join('a.author', 'user')
                            ->where('a.validated = :validated')
                            ->setParameter('validated', $validated)
                            ->addSelect('user');                            
        if($not === true) 
        {
            $qb->andwhere('a.statuts != :statut')
                  ->setParameter('statut', $statut);
        }
        else
        {
            $qb->andwhere('a.statuts = :statut')
                  ->setParameter('statut', $statut);
        }
        if($page != 0) {
        $qb->setFirstResult($first)
           ->setMaxResults($limit); 
         }
                            
        return $qb->getQuery()->getResult();
    }
    
    
    function findAllNotRefusedFor($idUser) 
    {
        $query = $this->createQueryBuilder('i')
                ->where('i.author = :author')
                ->setParameter('author', $idUser)
                ->andWhere('i.statuts != :statut')
                ->setParameter('statut', "refused");
        
        return $query->getQuery()->getResult();
    }
}
