<?php

namespace innoLCL\AllUserBundle\Entity;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    /**
    * Donne le nombre d'idée selectionnée
    *
    * @param none
    * @return int
    */
    public function getAllWithResetToken() 
    {
        $today = new \DateTime();
        $today->modify('-1 hour');
        $todayCompare = $today->format('Y-m-d H:i:s');
        
        $qb = $this->createQueryBuilder('u');
        $qb->select('u')
                ->where($qb->expr()->isNotNull('u.confirmationToken'))
                ->andWhere('u.passwordRequestedAt <= :todayCompare');
        
        $qb->setParameter('todayCompare', $todayCompare);
        return $qb->getQuery()->getResult();
    }
    
    public function countInscriptions() 
    {
        $qb = $this->createQueryBuilder('u');
        $qb
            ->select('COUNT(u)');
        
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function countNouvellesInscriptions($dateReport) 
    {
        
        $dateReportStart = $dateReport->format('Y-m-d') . ' 00:00:00';
        $dateReportEnd = $dateReport->format('Y-m-d') . ' 23:59:59';
        
        $qb = $this->createQueryBuilder('u');
        $qb
            ->select('COUNT(u)')
            ->where("u.registeredAt >= :dateReportStart")
            ->andWhere("u.registeredAt <= :dateReportEnd")
            ->setParameter('dateReportStart', $dateReportStart)
            ->setParameter('dateReportEnd', $dateReportEnd);
        
        return $qb->getQuery()->getSingleScalarResult();
    }
        
    public function countConnexions($dateReport) 
    {
        
        $dateReportStart = $dateReport->format('Y-m-d') . ' 00:00:00';
        $dateReportEnd = $dateReport->format('Y-m-d') . ' 23:59:59';
        
        $qb = $this->createQueryBuilder('u');
        $qb
            ->select('COUNT(u)')
            ->where("u.lastLogin >= :dateReportStart")
            ->andWhere("u.lastLogin <= :dateReportEnd")
            ->setParameter('dateReportStart', $dateReportStart)
            ->setParameter('dateReportEnd', $dateReportEnd);
        
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    
}
